/*

// Generator configuration language 
// Files extension should be .genconf

// Perform for each object of particular type.
// Target file name is constructed from path parts and reference to 
// object (entity) attribute value. Path part may be given as strings
// or as plain text (if no white-space is involved.)

Entity:
    for Entity as entity
        angular/form.html => "forms/" + entity.name + ".html"

// collect all object of particular type and perform once for the list.
Enums:
    for all Enums as enums
        flask/enums.py.template => flask/enums.py

Model:
    for Model as model
        flask/models.py.template => flask/models.py

*/

ConfigurationFile:

    ('generator' gen_name=ID)?      // If generator name is not given it is
                                    // deduced from the file name.
    params*=Param                  // Optional generator parameters

    ('models' '{'
        models*=FilePath     // Relative file path in the "models"
    '}')?

    ('output' output=FilePath)?    // Output folder where code should be
                                   // generated. Default is 'src'

    rules*=GenRule
;

Param:
    name=ID '=' value=BASETYPE
;


GenRule:
    name=ID ':'
    'for' all?='all' types+=ID[','] 'as' var_names+=ID[',']
        template_path=FilePath '=>' target_file_expr=TargetFilePathExpression
;

FilePath:
    STRING
;

TargetFilePathExpression:
    op=FPExpOperand ('+' op=FPExpOperand)*
;

FPExpOperand:
    STRING | AttributeReference
;

AttributeReference[noskipws]:
    /\s*/ obj=ID '.' attr=ID
;

Comment:
  /\/\/.*$/|/\/\*(.|\n)*?\*\//
;
